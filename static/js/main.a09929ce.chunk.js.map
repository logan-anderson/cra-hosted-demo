{"version":3,"sources":["components/Hero.js","components/Paragraph.js","components/Images.js","components/FeatureList.js","components/Feature.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["Hero","text_color","background_color","align","className","style","color","backgroundColor","textAlign","justifyContent","name","focusRing","heroBlock","Component","index","data","offset","insetControls","template","label","defaultItem","headline","subtext","fields","component","widget","colors","options","paragraphBlock","text","imagesBlock","parse","filename","uploadDir","previewSrc","formValues","blocks","left","src","right","_template","alt","input","field","split","featureListBlock","FEATURE_BLOCKS","direction","features","heading","supporting_copy","feature","Home","cms","useCMS","formConfig","id","initialValues","onSubmit","alerts","success","useForm","form","usePlugin","HOME_BLOCKS","hero","images","paragraph","App","TinaCMS","enabled","sidebar","hidden","toolbar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a09929ce.chunk.js","sourcesContent":["import React from 'react'\nimport { InlineTextarea, BlocksControls } from 'react-tinacms-inline'\nimport '../styles/hero.css'\n\n/**\n * 1. Define the style props\n */\nexport function Hero({ text_color, background_color, align }) {\n  /**\n   * 2. Add dynamic inline styles on the 'hero' div\n   */\n  return (\n    <div\n      className=\"hero\"\n      style={{\n        color: text_color || '#000',\n        backgroundColor: background_color || 'aliceblue',\n        textAlign: align,\n        justifyContent: align === 'left' ? 'start' : align,\n      }}\n    >\n      <div className=\"wrapper wrapper--narrow\">\n        <h1>\n          <InlineTextarea name=\"headline\" focusRing={false} />\n        </h1>\n        <p>\n          <InlineTextarea name=\"subtext\" focusRing={false} />\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport const heroBlock = {\n  /**\n   * 3. Pass the block's data to the Hero\n   */\n  Component: ({ index, data }) => (\n    <BlocksControls index={index} focusRing={{ offset: 0 }} insetControls>\n      <Hero {...data} />\n    </BlocksControls>\n  ),\n  template: {\n    label: 'Hero',\n    defaultItem: {\n      headline: 'Suspended in a Sunbeam',\n      subtext: 'Dispassionate extraterrestrial observer',\n      /**\n       * 4. Update defaults with style values\n       */\n      background_color: '#051e26',\n      text_color: '#fffaf4',\n      align: 'center',\n    },\n    fields: [\n      /**\n       * 5. Add fields to edit styles in modal\n       */\n      {\n        name: 'background_color',\n        label: 'Background Color',\n        component: 'color',\n        widget: 'block',\n        colors: ['#051e26', '#f2dfc6', '#cfdcc8', '#ebbbbb', '#8a1414'],\n      },\n      {\n        name: 'text_color',\n        label: 'Text Color',\n        component: 'select',\n        options: ['white', 'black'],\n      },\n      {\n        name: 'align',\n        label: 'Alignment',\n        component: 'select',\n        options: ['center', 'left'],\n      },\n    ],\n  },\n}","import React from 'react'\nimport { BlocksControls, InlineTextarea } from 'react-tinacms-inline'\nimport '../styles/paragraph.css'\n\n/**\n * 1. Define the Block Component\n */\nfunction Paragraph({ index }) {\n    return (\n        <BlocksControls index={index} focusRing={{ offset: 0 }} insetControls>\n            <div className=\"paragraph__background\">\n                <div className=\"wrapper wrapper--narrow\">\n                    <p className=\"paragraph__text\">\n                        <InlineTextarea name=\"text\" focusRing={false} />\n                    </p>\n                </div>\n            </div>\n        </BlocksControls>\n    )\n}\n\n/**\n * 2. Define the Block\n */\nexport const paragraphBlock = {\n    Component: Paragraph,\n    template: {\n        label: 'Paragraph',\n        defaultItem: {\n            text:\n                'Take root and flourish quis nostrum exercitationem ullam corporis suscipit laboriosam culture Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur descended from astronomers encyclopaedia galactica? Nisi ut aliquid ex ea commodi consequatur something incredible is waiting to be known sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem ',\n        },\n        fields: [],\n    },\n}","import React from 'react'\nimport { BlocksControls, InlineImage } from 'react-tinacms-inline'\nimport '../styles/images.css'\n\n/**\n * 1. Define the Block Component\n */\nfunction Images({ index }) {\n    return (\n        <BlocksControls index={index} focusRing={{ offset: 0 }} insetControls>\n            <div className=\"wrapper\">\n                <div className=\"image-diptych\">\n                    <InlineImage\n                        name=\"left.src\"\n                        parse={filename => `${filename}`}\n                        uploadDir={() => '/'}\n                        previewSrc={formValues => `${formValues.blocks[index].left.src}`}\n                        focusRing={false}\n                    />\n                    <InlineImage\n                        name=\"right.src\"\n                        parse={filename => `/${filename}`}\n                        uploadDir={() => '/'}\n                        previewSrc={formValues => `${formValues.blocks[index].right.src}`}\n                        focusRing={false}\n                    />\n                </div>\n            </div>\n        </BlocksControls>\n    )\n}\n\n/**\n * 2. Define the Block with\n *  the Template and Component\n */\nexport const imagesBlock = {\n    Component: Images,\n    template: {\n        label: 'Image Diptych',\n        defaultItem: {\n            _template: 'images',\n            left: {\n                src: '/ivan-bandura-unsplash-square.jpg',\n                alt: 'ocean',\n            },\n            right: {\n                src: '/martin-sanchez-unsplash-square.jpg',\n                alt: 'dunes',\n            },\n        },\n        fields: [\n            {\n                name: 'left.src',\n                label: 'Left-Hand Image',\n                component: 'image',\n                parse: filename => `/${filename}`,\n                uploadDir: () => '/',\n                previewSrc: (formValues, input) => {\n                    /**\n                     * Get index from field input. Assumes the block\n                     * is only one level deep\n                     */\n                    const index = input.field.name.split('.')[1]\n                    /**\n                     * Use that index to target the correct\n                     * block in `formValues`\n                     */\n                    const currentBlockImage = formValues.blocks[index].left.src\n                    return currentBlockImage\n                },\n                focusRing: false,\n            },\n            {\n                name: 'left.alt',\n                label: 'Left-Hand Image Alt Text',\n                component: 'text',\n            },\n            {\n                name: 'right.src',\n                label: 'Right-Hand Image',\n                component: 'image',\n                parse: filename => `/${filename}`,\n                uploadDir: () => '/',\n                previewSrc: (formValues, input) => {\n                    const index = input.field.name.split('.')[1]\n                    const currentBlockImage = formValues.blocks[index].right.src\n                    return currentBlockImage\n                },\n                focusRing: false,\n            },\n            {\n                name: 'right.alt',\n                label: 'Right-Hand Image Alt Text',\n                component: 'text',\n            },\n        ],\n    },\n}","import React from 'react'\nimport { BlocksControls, InlineBlocks } from 'react-tinacms-inline'\nimport '../styles/features.css'\nimport { featureBlock } from './Feature'\n\n/**\n * 1. Define the Block Component\n */\nfunction FeatureList({ index }) {\n    return (\n        <BlocksControls index={index} focusRing={{ offset: 0 }} insetControls>\n            <div className=\"wrapper\">\n                <InlineBlocks name=\"features\" blocks={FEATURE_BLOCKS} direction=\"row\" className=\"feature-list\" />\n            </div>\n        </BlocksControls>\n    )\n}\n\n/**\n * 2. Define the FeatureList Block\n */\nexport const featureListBlock = {\n    Component: FeatureList,\n    template: {\n        label: 'Feature List',\n        defaultItem: {\n            _template: 'features',\n            features: [\n                {\n                    _template: 'feature',\n                    heading: 'heading 1',\n                    supporting_copy: 'supporting copy',\n                },\n                {\n                    _template: 'feature',\n                    heading: 'heading 2',\n                    supporting_copy: 'supporting copy',\n                },\n                {\n                    _template: 'feature',\n                    heading: 'heading 3',\n                    supporting_copy: 'supporting copy',\n                },\n            ],\n        },\n        fields: [],\n    },\n}\n\n/**\n * 3. Define the block options\n * for FeatureList to render, we will add\n * a block to this next\n */\nconst FEATURE_BLOCKS = {\n    feature: featureBlock,\n}","import React from 'react'\nimport { BlocksControls, InlineTextarea } from 'react-tinacms-inline'\nimport '../styles/features.css'\n\nfunction Feature({ index }) {\n    return (\n        <BlocksControls index={index}>\n            <div className=\"feature\">\n                <h3>\n                    <InlineTextarea name=\"heading\" focusRing={false} />\n                </h3>\n                <p>\n                    <InlineTextarea name=\"supporting_copy\" focusRing={false} />\n                </p>\n            </div>\n        </BlocksControls>\n    )\n}\n\nexport const featureBlock = {\n    Component: Feature,\n    template: {\n        label: 'Feature',\n        defaultItem: {\n            _template: 'feature',\n            heading: 'Marie Skłodowska Curie',\n            supporting_copy:\n                'Rich in mystery muse about vastness is bearable only through love Ut enim ad minima veniam at the edge of forever are creatures of the cosmos. ',\n        },\n        fields: [],\n    },\n}","import React from 'react';\nimport data from './data/data.json';\nimport { useCMS, useForm, usePlugin } from 'tinacms';\nimport { InlineForm, InlineBlocks } from 'react-tinacms-inline';\n\n\nimport { heroBlock } from \"./components/Hero\";\nimport { paragraphBlock } from './components/Paragraph';\nimport { imagesBlock } from './components/Images';\nimport { featureListBlock } from './components/FeatureList';\nexport default function Home() {\n  const cms = useCMS()\n\n  const formConfig = {\n    id: './data/data.json',\n    initialValues: data,\n    onSubmit() {\n      cms.alerts.success('Saved!')\n    }\n  }\n  const [, form] = useForm(formConfig)\n  usePlugin(form)\n\n  return (\n    <div className='home'>\n      <InlineForm form={form}>\n        <InlineBlocks name=\"blocks\" blocks={HOME_BLOCKS} />\n      </InlineForm>\n    </div>\n  );\n}\nconst HOME_BLOCKS = {\n  hero: heroBlock,\n  images: imagesBlock,\n  paragraph: paragraphBlock,\n  features: featureListBlock,\n}\n","import React from 'react';\nimport { TinaProvider, TinaCMS } from 'tinacms';\nimport Home from './Home';\n\nfunction App() {\n  const cms = new TinaCMS({\n    enabled: true,\n    sidebar: {\n      hidden: true,\n    },\n    toolbar: { hidden: false },\n  });\n\n  return (\n    <TinaProvider cms={cms}>\n      <Home />\n    </TinaProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}